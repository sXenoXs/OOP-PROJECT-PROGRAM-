import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Set up display
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Space Shooter")

# Colors
WHITE = (255, 255, 255)

# Player
player_size = 50
player_x = WIDTH // 2 - player_size // 2
player_y = HEIGHT - 2 * player_size
player_speed = 5
player_health = 3  # Initial health

# Enemy
enemy_size = 50
enemy_speed = 3
enemies = []

# Bullet
bullet_size = 5
bullet_speed = 30
player_bullets = []
enemy_bullets = []

# Font for text
font = pygame.font.Font(None, 36)

# Score, Timer, and Player Health
score = 0
start_time = pygame.time.get_ticks()

# Game state
game_over = False

# Clock to control the frame rate
clock = pygame.time.Clock()

def restart_game():
    global player_health, score, start_time, player_x, player_bullets, enemy_bullets, enemies, game_over
    player_health = 3
    score = 0
    start_time = pygame.time.get_ticks()
    player_x = WIDTH // 2 - player_size // 2
    player_bullets = []
    enemy_bullets = []
    enemies = []
    game_over = False

# Game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    if not game_over:
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and player_x > 0:
            player_x -= player_speed
        if keys[pygame.K_RIGHT] and player_x < WIDTH - player_size:
            player_x += player_speed

        # Shoot a bullet when space key is pressed
        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE]:
            bullet_x = player_x + player_size // 2 - bullet_size // 2
            bullet_y = player_y
            player_bullets.append([bullet_x, bullet_y])

        # Move player bullets
        for bullet in player_bullets:
            bullet[1] -= bullet_speed

        # Remove bullets that go off-screen
        player_bullets = [bullet for bullet in player_bullets if bullet[1] > 0]

        # Move enemies
        for enemy in enemies:
            enemy[1] += enemy_speed

            # Randomly make enemies shoot
            if random.randint(1, 100) == 1:
                enemy_bullet_x = enemy[0] + enemy_size // 2 - bullet_size // 2
                enemy_bullet_y = enemy[1]
                enemy_bullets.append([enemy_bullet_x, enemy_bullet_y])

        # Move enemy bullets
        for bullet in enemy_bullets:
            bullet[1] += bullet_speed

        # Remove bullets that go off-screen
        enemy_bullets = [bullet for bullet in enemy_bullets if bullet[1] < HEIGHT]

        # Spawn enemies
        if random.randint(1, 50) == 1:
            enemy_x = random.randint(0, WIDTH - enemy_size)
            enemy_y = 0
            enemies.append([enemy_x, enemy_y])

        # Check for collisions between player bullets and enemies
        for bullet in player_bullets:
            for enemy in enemies:
                if (
                    enemy[0] < bullet[0] < enemy[0] + enemy_size
                    and enemy[1] < bullet[1] < enemy[1] + enemy_size
                ):
                    enemies.remove(enemy)
                    player_bullets.remove(bullet)
                    score += 10

        # Check for collisions between player and enemy bullets
        for bullet in enemy_bullets:
            if (
                player_x < bullet[0] < player_x + player_size
                and player_y < bullet[1] < player_y + player_size
            ):
                enemy_bullets.remove(bullet)
                player_health -= 1
                if player_health == 0:
                    game_over = True

        # Check for collisions between player and enemies
        for enemy in enemies:
            if (
                player_x < enemy[0] < player_x + player_size
                and player_y < enemy[1] < player_y + player_size
            ):
                enemies.remove(enemy)
                player_health -= 1
                if player_health == 0:
                    game_over = True

        # Remove enemies that go off-screen
        enemies = [enemy for enemy in enemies if enemy[1] < HEIGHT]

    # Clear the screen
    screen.fill((0, 0, 0))

    if not game_over:
        # Draw player
        pygame.draw.rect(screen, WHITE, [player_x, player_y, player_size, player_size])

        # Draw enemies
        for enemy in enemies:
            pygame.draw.rect(screen, WHITE, [enemy[0], enemy[1], enemy_size, enemy_size])

        # Draw player bullets
        for bullet in player_bullets:
            pygame.draw.rect(screen, WHITE, [bullet[0], bullet[1], bullet_size, bullet_size])

        # Draw enemy bullets
        for bullet in enemy_bullets:
            pygame.draw.rect(screen, WHITE, [bullet[0], bullet[1], bullet_size, bullet_size])

        # Draw score
        score_text = font.render("Score: " + str(score), True, WHITE)
        screen.blit(score_text, (10, 10))

        # Draw timer
        elapsed_time = (pygame.time.get_ticks() - start_time) // 1000
        timer_text = font.render("Time: " + str(elapsed_time) + "s", True, WHITE)
        screen.blit(timer_text, (WIDTH - 150, 10))

        # Draw player health
        health_text = font.render("Health: " + "❤" * player_health, True, WHITE)
        screen.blit(health_text, (WIDTH // 2 - 50, 10))
    else:
        # Draw game over text
        game_over_text = font.render("Game Over", True, WHITE)
        screen.blit(game_over_text, (WIDTH // 2 - 70, HEIGHT // 2 - 50))

        # Draw restart button
        restart_button = pygame.Rect(WIDTH // 2 - 70, HEIGHT // 2 + 20, 140, 50)
        pygame.draw.rect(screen, WHITE, restart_button)
        restart_text = font.render("Restart", True, (0, 0, 0))
        screen.blit(restart_text, (WIDTH // 2 - 45, HEIGHT // 2 + 40))

        # Draw exit button
        exit_button = pygame.Rect(WIDTH // 2 - 70, HEIGHT // 2 + 80, 140, 50)
        pygame.draw.rect(screen, WHITE, exit_button)
        exit_text = font.render("Exit", True, (0, 0, 0))
        screen.blit(exit_text, (WIDTH // 2 - 30, HEIGHT // 2 + 100))

        # Check for button clicks
        mouse_x, mouse_y = pygame.mouse.get_pos()
        if restart_button.collidepoint((mouse_x, mouse_y)):
            if pygame.mouse.get_pressed()[0]:
                restart_game()

        if exit_button.collidepoint((mouse_x, mouse_y)):
            if pygame.mouse.get_pressed()[0]:
                pygame.quit()
                sys.exit()

    # Update the display
    pygame.display.flip()

    # Set the frame rate
    clock.tick(60)
